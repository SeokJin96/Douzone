/*
 오류
 1. 에러(error)			: 네트워크 장애, 메모리 누수, 하드웨어 >> 개발자가 코드적으로 해결 불가
 2. 예외(exception) : 개발자가 코드 실수로 발생 >> 문제 발생 코드 찾아서 >> 수정 >> 배포
 2.1 컴파일시 ... 실행파일 생성 안됨 (무조건 해결)
 2.2 런타임시 (실행도중)에 문제가 발생 >> 강제 종료 >> 문제가 생긴 시점 >> 이후 나머지 코드 실행 안됨
  
  예외처리 : 프로그램이 안정적으로 종료 >> 나면 원인 분석 >> 코드 수정 .... >> 다시 배포
  
 try[
 			>> 문제가 의심되는 코드
 			>> 문제가 발생되면 >> 어떤 일이 >> 예외가 발생한 정보를 담을 수 있는 객체를 자동생성
 			ex)
 			>>[0][1][2]		>> car[3] = "" >> ArrayIndexOutOfBoundsException(생성) >> 예외담기
 			>>	new ArrayIndexOutOfBoundsException("정보")
 ]catch(Exception e){		// Exception은 모든 예외의 부모 타입
 			>> 문제 파악
 			>> 처리 (코드 수정되지 않아요) 보고만
 			>> 1. 관리자 email
 			>> 2. 로그기록 (장애 발생 기록)
 			>> 3. 강제종료는 막는다
 }finally{
 			>> 문제가 발생되던, 발생하지 않던 강제적으로 실행되는 코드
 			// 함수 return 만나면 종료 ... return을 만나도 finally 블록은 강제실행;;(굉장히 강함)
 }
 
 
 
 */
public class Ex01_Exception {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
